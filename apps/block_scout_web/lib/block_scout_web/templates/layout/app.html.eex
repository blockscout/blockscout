<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <%= case @view_module do %>
      <% Elixir.BlockScoutWeb.ChainView -> %>
        <link rel="stylesheet" href="<%= static_path(@conn, "/css/main-page.css") %>">
        <link rel="preload" href="<%= static_path(@conn, "/js/chain.js") %>" as="script">
        <link rel="preload" href="<%= static_path(@conn, "/js/chart-loader.js") %>" as="script">
        <link rel="preload" href="<%= static_path(@conn, "/js/token-transfers-toggle.js") %>" as="script">
      <% _ -> %>
        <link rel="stylesheet" href="<%= static_path(@conn, "/css/app.css") %>">
    <% end %>
    <link rel="preload" href="<%= static_path(@conn, "/js/autocomplete.js") %>" as="script">
    <link rel="preload" href="<%= static_path(@conn, "/images/icons/fontawesome/github.svg") %>" as="image" crossorigin>
    <link rel="preload" href="<%= static_path(@conn, "/images/icons/fontawesome/twitter.svg") %>" as="image" crossorigin>
    <link rel="preload" href="<%= static_path(@conn, "/images/icons/fontawesome/telegram.svg") %>" as="image" crossorigin>
    <link rel="preload" href="<%= static_path(@conn, "/images/icons/fontawesome/bar-chart.svg") %>" as="image" crossorigin>
    <link rel="preload" href="<%= static_path(@conn, "/images/icons/fontawesome/info-circle.svg") %>" as="image" crossorigin>
    <link rel="preload" href="<%= static_path(@conn, "/images/icons/fontawesome/tag.svg") %>" as="image" crossorigin>
    <link rel="preload" href="<%= static_path(@conn, "/css/non-critical.css") %>" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <link rel="stylesheet" href="<%= static_path(@conn, "/css/non-critical.css") %>">
    <%= render_existing(@view_module, "styles.html", assigns) %>

    <link rel="apple-touch-icon" sizes="180x180" href="<%= static_path(@conn, "/apple-touch-icon.png") %>">
    <link rel="icon" type="image/png" sizes="32x32" href="<%= static_path(@conn, "/images/favicon-32x32.png") %>">
    <link rel="icon" type="image/png" sizes="16x16" href="<%= static_path(@conn, "/images/favicon-16x16.png") %>">
    <link rel="manifest" href="<%= static_path(@conn, "/manifest.webmanifest") %>">
    <link rel="mask-icon" href="<%= static_path(@conn, "/safari-pinned-tab.svg") %>" color="#5bbad5">
    <link rel="shortcut icon" type='image/x-icon' href="<%= static_path(@conn, "/images/favicon.ico") %>">
    <meta name="msapplication-TileColor" content="#7dd79f">
    <meta name="msapplication-config" content="<%= static_path(@conn, "/browserconfig.xml") %>">
    <meta name="theme-color" content="#ffffff">

    <%= render_existing(@view_module, "_metatags.html", assigns) || render("_default_title.html") %>

    <script defer data-cfasync="false">
      window.localized = {
        'Blocks Indexed': '<%= gettext("Blocks Indexed") %>',
        'Block Processing': '<%= gettext("Block Mined, awaiting import...") %>',
        'Blocks With Internal Transactions Indexed': '<%= gettext("Blocks With Internal Transactions Indexed") %>',
        'Less than': '<%= gettext("Less than") %>',
        'Market Cap': '<%= gettext("Market Cap") %>',
        'Price': '<%= gettext("Price") %>',
        'Ether': '<%= Explorer.coin_name() %>',
        'Tx/day': '<%= gettext("Tx/day") %>'
      }
    </script>
  </head>

  <body>
    <script defer data-cfasync="false">
      function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
      }

      function applyDarkMode() {
        if (getCookie('chakra-ui-color-mode') === "dark") {
          document.body.className += " " + "dark-theme-applied";
          document.body.style.backgroundColor = "#1c1d31";
        }
      }
      window.onload = applyDarkMode()
    </script>
    <script defer data-cfasync="false">
      if (getCookie('chakra-ui-color-mode') === "dark") {
        if (document.getElementById("top-navbar")) {
          document.getElementById("top-navbar").style.backgroundColor = "#282945";
        }
        if (document.getElementById("navbar-logo")) {
          document.getElementById("navbar-logo").style.filter = "brightness(0) invert(1)";
        }
        let modeChanger = document.getElementById("dark-mode-changer");
        if (modeChanger) {
          modeChanger.className += " " + "dark-mode-changer--dark";
        }
      }
    </script>
    <script defer data-cfasync="false">
      if (getCookie('chakra-ui-color-mode') === "dark") {
        const search = document.getElementById("main-search-autocomplete")
        const searchMobile = document.getElementById("main-search-autocomplete-mobile")
            if (search && search.style) {
          search.style.backgroundColor = "#22223a";
              search.style.borderColor = "#22223a";
        }
        if (searchMobile && searchMobile.style) {
          searchMobile.style.backgroundColor = "#22223a";
          searchMobile.style.borderColor = "#22223a";
        }
      }
    </script>
    <% raw_dark_forest_addresses_0_4 = CustomContractsHelpers.get_raw_custom_addresses_list(:dark_forest_addresses) || "" %>
    <% raw_dark_forest_addresses_0_5 = CustomContractsHelpers.get_raw_custom_addresses_list(:dark_forest_addresses_v_0_5) || "" %>
    <% raw_dark_forest_addresses_0_6 = CustomContractsHelpers.get_raw_custom_addresses_list(:dark_forest_addresses_v_0_6) || "" %>
    <% raw_dark_forest_addresses_0_6_r2 = CustomContractsHelpers.get_raw_custom_addresses_list(:dark_forest_addresses_v_0_6_r2) || "" %>
    <% raw_dark_forest_addresses = raw_dark_forest_addresses_0_4 %>
    <% raw_dark_forest_addresses = if raw_dark_forest_addresses_0_5 !== "", do: raw_dark_forest_addresses <> "," <> raw_dark_forest_addresses_0_5, else: raw_dark_forest_addresses %>
    <% raw_dark_forest_addresses = if raw_dark_forest_addresses_0_6 !== "", do: raw_dark_forest_addresses <> "," <> raw_dark_forest_addresses_0_6, else: raw_dark_forest_addresses %>
    <% raw_dark_forest_addresses = if raw_dark_forest_addresses_0_6_r2 !== "", do: raw_dark_forest_addresses <> "," <> raw_dark_forest_addresses_0_6_r2, else: raw_dark_forest_addresses %>

    <% raw_circles_addresses = CustomContractsHelpers.get_raw_custom_addresses_list(:circles_addresses) %>
    <%= cond do %>
      <% (
        @view_module == Elixir.BlockScoutWeb.TransactionInternalTransactionView ||
        @view_module == Elixir.BlockScoutWeb.TransactionLogView ||
        @view_module == Elixir.BlockScoutWeb.TransactionRawTraceView ||
        @view_module == Elixir.BlockScoutWeb.TransactionTokenTransferView ||
        @view_module == Elixir.BlockScoutWeb.TransactionStateView
      ) -> %>
        <% to_address = @transaction && @transaction.to_address && "0x" <> Base.encode16(@transaction.to_address.hash.bytes, case: :lower) %>
        <% {:ok, created_from_address} = if @transaction.to_address_hash, do: Chain.hash_to_address(@transaction.to_address_hash), else: {:ok, nil} %>
        <% created_from_address_hash_str = if from_address_hash(created_from_address), do: "0x" <> Base.encode16(from_address_hash(created_from_address).bytes, case: :lower), else: nil %>
        <script>
          function applyCustomMode() {
            applyCustomTheme("<%= raw_dark_forest_addresses %>", "dark-forest-theme-applied")
            applyCustomTheme("<%= raw_circles_addresses %>", "circles-theme-applied")
          }
          function applyCustomTheme(contractAddressHashesRaw, customClass) {
            if (contractAddressHashesRaw !== "") {
              const contractAddressHashes = contractAddressHashesRaw.split(',').map(hash => hash.toLowerCase())
              const to_address = "<%= to_address %>"
              const created_from_address_hash_str = "<%= created_from_address_hash_str %>"

              contractAddressHashes.forEach(contractAddressHash => {
                if (contractAddressHash == to_address) {
                  document.body.className += " " + customClass;
                  return;
                } else if (contractAddressHash == created_from_address_hash_str) {
                  document.body.className += " " + customClass;
                  return;
                }
              })
            }

          }

          window.onload = applyCustomMode()
        </script>
      <% (
        @view_module == Elixir.BlockScoutWeb.AddressTransactionView ||
        @view_module == Elixir.BlockScoutWeb.AddressTokenTransferView ||
        @view_module == Elixir.BlockScoutWeb.AddressTokenView ||
        @view_module == Elixir.BlockScoutWeb.AddressInternalTransactionView ||
        @view_module == Elixir.BlockScoutWeb.AddressCoinBalanceView ||
        @view_module == Elixir.BlockScoutWeb.AddressLogsView ||
        @view_module == Elixir.BlockScoutWeb.AddressValidationView ||
        @view_module == Elixir.BlockScoutWeb.AddressContractView ||
        @view_module == Elixir.BlockScoutWeb.AddressReadContractView ||
        @view_module == Elixir.BlockScoutWeb.AddressReadProxyView ||
        @view_module == Elixir.BlockScoutWeb.AddressWriteContractView ||
        @view_module == Elixir.BlockScoutWeb.AddressWriteProxyView
      ) -> %>
        <% created_from_address = if @address && from_address_hash(@address), do: "0x" <> Base.encode16(from_address_hash(@address).bytes, case: :lower), else: nil %>
        <script>
          function applyCustomMode() {
            applyCustomTheme("<%= raw_dark_forest_addresses %>", "dark-forest-theme-applied")
            applyCustomTheme("<%= raw_circles_addresses %>", "circles-theme-applied")
          }
          function applyCustomTheme(contractAddressHashesRaw, customClass) {
            if (contractAddressHashesRaw !== "") {
              const contractAddressHashes = contractAddressHashesRaw.split(',').map(hash => hash.toLowerCase())
              const created_from_address = "<%= created_from_address %>"
              contractAddressHashes.forEach(contractAddressHash => {
                if (window.location.pathname.toLowerCase().includes(contractAddressHash)) {
                  document.body.className += " " + customClass;
                  return;
                } else if (contractAddressHash == created_from_address) {
                  document.body.className += " " + customClass;
                  return;
                }
              })
            }
          }

          window.onload = applyCustomMode()
        </script>
      <% (
        @view_module == Elixir.BlockScoutWeb.Tokens.TransferView ||
        @view_module == Elixir.BlockScoutWeb.Tokens.ReadContractView ||
        @view_module == Elixir.BlockScoutWeb.Tokens.HolderView ||
        @view_module == Elixir.BlockScoutWeb.Tokens.Instance.TransferView ||
        @view_module == Elixir.BlockScoutWeb.Tokens.Instance.MetadataView ||
        @view_module == Elixir.BlockScoutWeb.PageNotFoundView
      ) -> %>
        <% {:ok, created_from_address} = if @token && @token.contract_address_hash, do: Chain.hash_to_address(@token.contract_address_hash), else: {:ok, nil} %>
        <% created_from_address_hash = if from_address_hash(created_from_address), do: "0x" <> Base.encode16(from_address_hash(created_from_address).bytes, case: :lower), else: nil %>
        <script>
          function applyCustomMode() {
            applyCustomTheme("<%= raw_dark_forest_addresses %>", "dark-forest-theme-applied")
            applyCustomTheme("<%= raw_circles_addresses %>", "circles-theme-applied")
          }
          function applyCustomTheme(contractAddressHashesRaw, customClass) {
            if (contractAddressHashesRaw !== "") {
              const contractAddressHashes = contractAddressHashesRaw.split(',').map(hash => hash.toLowerCase())
              const created_from_address_hash = "<%= created_from_address_hash %>"
              contractAddressHashes.forEach(contractAddressHash => {
                if (window.location.pathname.toLowerCase().includes(contractAddressHash)) {
                  document.body.className += " " + customClass;
                  return;
                } else if (contractAddressHash == created_from_address_hash) {
                  document.body.className += " " + customClass;
                  return;
                }
              })
            }
          }

          window.onload = applyCustomMode()
        </script>
      <% true -> %>
        <%= nil %>
    <% end %>
    <div class="layout-container">
      <% show_maintenance_alert = Application.get_env(:block_scout_web, BlockScoutWeb.Chain)[:show_maintenance_alert] %>
      <%= if show_maintenance_alert do %>
        <div class="alert alert-warning text-center mb-0 p-3" data-selector="indexed-status">
          <%= raw(System.get_env("MAINTENANCE_ALERT_MESSAGE")) %>
        </div>
      <% end %>
      <% indexed_ratio_blocks = Explorer.Chain.indexed_ratio_blocks() %>
      <% indexed_ratio =
      case Chain.finished_blocks_indexing?(indexed_ratio_blocks) do
       false -> indexed_ratio_blocks
       _ -> Explorer.Chain.indexed_ratio_internal_transactions()
      end %>
      <%= if not Explorer.Chain.finished_indexing?(indexed_ratio_blocks) do %>
        <div class="alert alert-warning text-center mb-0 p-3" data-seindexed_ratiolector="indexed-status">
          <%= render BlockScoutWeb.CommonComponentsView, "_loading_spinner.html" %>
          <span data-indexed-ratio-blocks="<%= indexed_ratio_blocks %>" data-indexed-ratio="<%= indexed_ratio %>"></span>
          <%= gettext("- We're indexing this chain right now. Some of the counts may be inaccurate.") %>
        </div>
      <% end %>
      <%= render BlockScoutWeb.LayoutView, "_topnav.html", current_user: Conn.get_session(@conn, :current_user), conn: @conn %>

      <main class="js-ad-dependant-pt pt-5">
        <p class="alert alert-info" role="alert"><%= get_flash(@conn, :info) %></p>
        <p class="alert alert-danger" role="alert"><%= get_flash(@conn, :error) %></p>
        <%= @inner_content %>
      </main>
      <%= render BlockScoutWeb.LayoutView, "_footer.html", assigns %>
    </div>
    <%= if (
      @view_module != Elixir.BlockScoutWeb.ChainView &&
      @view_module != Elixir.BlockScoutWeb.BlockView &&
      @view_module != Elixir.BlockScoutWeb.BlockTransactionView &&
      @view_module != Elixir.BlockScoutWeb.AddressView &&
      @view_module != Elixir.BlockScoutWeb.TokensView &&
      @view_module != Elixir.BlockScoutWeb.TransactionView &&
      @view_module != Elixir.BlockScoutWeb.PendingTransactionView &&
      @view_module != Elixir.BlockScoutWeb.TransactionInternalTransactionView &&
      @view_module != Elixir.BlockScoutWeb.TransactionLogView &&
      @view_module != Elixir.BlockScoutWeb.TransactionRawTraceView &&
      @view_module != Elixir.BlockScoutWeb.TransactionTokenTransferView &&
      @view_module != Elixir.BlockScoutWeb.TransactionStateView &&
      @view_module != Elixir.BlockScoutWeb.AddressTransactionView &&
      @view_module != Elixir.BlockScoutWeb.AddressTokenTransferView &&
      @view_module != Elixir.BlockScoutWeb.AddressTokenView &&
      @view_module != Elixir.BlockScoutWeb.AddressInternalTransactionView &&
      @view_module != Elixir.BlockScoutWeb.AddressCoinBalanceView &&
      @view_module != Elixir.BlockScoutWeb.AddressLogsView &&
      @view_module != Elixir.BlockScoutWeb.AddressValidationView &&
      @view_module != Elixir.BlockScoutWeb.AddressContractView &&
      @view_module != Elixir.BlockScoutWeb.AddressContractVerificationView &&
      @view_module != Elixir.BlockScoutWeb.AddressContractVerificationViaJsonView &&
      @view_module != Elixir.BlockScoutWeb.AddressContractVerificationViaFlattenedCodeView &&
      @view_module != Elixir.BlockScoutWeb.AddressContractVerificationVyperView &&
      @view_module != Elixir.BlockScoutWeb.AddressReadContractView &&
      @view_module != Elixir.BlockScoutWeb.AddressReadProxyView &&
      @view_module != Elixir.BlockScoutWeb.AddressWriteContractView &&
      @view_module != Elixir.BlockScoutWeb.AddressWriteProxyView &&
      @view_module != Elixir.BlockScoutWeb.Tokens.TransferView &&
      @view_module != Elixir.BlockScoutWeb.Tokens.ContractView &&
      @view_module != Elixir.BlockScoutWeb.Tokens.HolderView &&
      @view_module != Elixir.BlockScoutWeb.Tokens.InventoryView &&
      @view_module != Elixir.BlockScoutWeb.Tokens.InstanceView &&
      @view_module != Elixir.BlockScoutWeb.Tokens.Instance.MetadataView &&
      @view_module != Elixir.BlockScoutWeb.Tokens.Instance.OverviewView &&
      @view_module != Elixir.BlockScoutWeb.Tokens.Instance.TransferView &&
      @view_module != Elixir.BlockScoutWeb.VerifiedContractsView &&
      @view_module != Elixir.BlockScoutWeb.APIDocsView &&
      @view_module != Elixir.BlockScoutWeb.Admin.DashboardView &&
      @view_module != Elixir.BlockScoutWeb.SearchView &&
      @view_module != Elixir.BlockScoutWeb.AddressContractVerificationViaStandardJsonInputView &&
      @view_module != Elixir.BlockScoutWeb.AddressContractVerificationViaMultiPartFilesView &&
      @view_module != Elixir.BlockScoutWeb.StakesView
    ) do %>
      <script defer data-cfasync="false" src="<%= static_path(@conn, "/js/app.js") %>"></script>
    <% end %>
    <%=
      for status <- ["error", "warning", "success", "question"] do
        render BlockScoutWeb.CommonComponentsView, "_modal_status.html", status: status
      end
    %>
    <%= render_existing(@view_module, "scripts.html", assigns) %>
    <%= if @view_module == Elixir.BlockScoutWeb.ChainView do %>
      <script defer data-cfasync="false" src="<%= static_path(@conn, "/js/chain.js") %>"></script>
      <script defer data-cfasync="false" src="<%= static_path(@conn, "/js/chart-loader.js") %>"></script>
      <script defer data-cfasync="false" src="<%= static_path(@conn, "/js/token-transfers-toggle.js") %>"></script>
    <% end %>
    <script defer src="<%= static_path(@conn, "/js/autocomplete.js") %>"></script>
    <%= if @view_module in [Elixir.BlockScoutWeb.AddressContractVerificationView, Elixir.BlockScoutWeb.AddressContractVerificationVyperView, Elixir.BlockScoutWeb.AddressContractVerificationViaFlattenedCodeView, Elixir.BlockScoutWeb.AddressContractVerificationViaMultiPartFilesView, Elixir.BlockScoutWeb.AddressContractVerificationViaJsonView, Elixir.BlockScoutWeb.AddressContractVerificationViaStandardJsonInputView] do %>
      <script defer data-cfasync="false" src="<%= static_path(@conn, "/js/verification-form.js") %>"></script>
    <% end %>
    <%= if @view_module in [Elixir.BlockScoutWeb.AddressContractVerificationViaMultiPartFilesView, Elixir.BlockScoutWeb.AddressContractVerificationViaJsonView, Elixir.BlockScoutWeb.AddressContractVerificationViaStandardJsonInputView] do %>
      <script defer data-cfasync="false" src="<%= static_path(@conn, "/js/dropzone.js") %>"></script>
    <% end %>
  </body>
</html>
