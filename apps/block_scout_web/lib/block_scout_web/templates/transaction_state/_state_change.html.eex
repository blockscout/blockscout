<% coin_or_transfer = if @coin_or_token_transfers == :coin, do: :coin, else: elem(List.first(@coin_or_token_transfers), 1)%>
<%= if coin_or_transfer != :coin and coin_or_transfer.token.type != "ERC-20" or has_diff?(@balance_diff) do %>
  <tr data-identifier-hash="<%= @address && @address.hash %>">
    <%= if @address.hash == @burn_address_hash do %>
      <td class="stakes-td">
        <dt class="text-muted">
          <%= render BlockScoutWeb.CommonComponentsView, "_i_tooltip_2.html",
                    text: gettext("Address used in token mintings and burnings.") %>
          <%= gettext("Burn address") %>
        </dt>
      </td>
      <td class="stakes-td">
        <%= render BlockScoutWeb.AddressView, "_link.html", address: @address, contract: BlockScoutWeb.AddressView.contract?(@address), use_custom_tooltip: false %>
      </td>
      <td class="stakes-td"></td>
      <td class="stakes-td"></td>
    <% else %>
      <%= if Map.get(assigns, :miner) do %>
        <td class="stakes-td">
          <dt class="text-muted">
            <%= render BlockScoutWeb.CommonComponentsView, "_i_tooltip_2.html",
                    text: gettext("A block producer who successfully included the block onto the blockchain.") %>
            <%= gettext("Miner") %>
          </dt>
        </td>
        <td class="stakes-td">
          <%= render BlockScoutWeb.AddressView, "_link.html", address: @address, contract: false, use_custom_tooltip: false %>
        </td>
      <% else %>
        <td class="stakes-td"></td>
        <td class="stakes-td">
          <%= render BlockScoutWeb.AddressView, "_link.html", address: @address, contract: BlockScoutWeb.AddressView.contract?(@address), use_custom_tooltip: false %>
        </td>
      <% end %>
      <%= if not_negative?(@balance_before) and not_negative?(@balance_after) do %>
        <td class="stakes-td">
          <span><%= display_value(@balance_before, coin_or_transfer) %></span>
        </td>
        <td class="stakes-td">
          <span><%= display_value(@balance_after, coin_or_transfer) %></span>
        </td>
      <% else %>
        <td class="stakes-td"></td>
        <td class="stakes-td"></td>
      <% end %>
    <% end %>
    <td class="stakes-td">
      <%= if is_list(@coin_or_token_transfers) and elem(List.first(@coin_or_token_transfers), 1).token.type != "ERC-20" do %>
        <%= for {type, transfer} <- @coin_or_token_transfers do %>
          <%= case type do %>
            <% :from ->  %>
            <div class="py-1 mr-4 text-danger">▼ <%= display_nft(transfer) %></div>
            <% :to -> %>
            <div class="py-1 mr-4 text-success">▲ <%= display_nft(transfer) %></div>
          <% end %>
        <% end %>
      <% else %>
        <%= if not_negative?(@balance_diff) do %>
          <span class="mr-4 text-success">▲ <%= display_value(@balance_diff, coin_or_transfer) %></span>
        <% else %>
          <span class="mr-4 text-danger">▼ <%= display_value(absolute_value_of(@balance_diff), coin_or_transfer) %></span>
        <% end %>
      <% end %>
    </td>
  </tr>
<% end %>
