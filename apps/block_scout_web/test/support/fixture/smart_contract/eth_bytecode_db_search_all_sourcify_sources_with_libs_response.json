{
    "ethBytecodeDbSources": [],
    "sourcifySources": [
        {
            "fileName": "src/zkbob/ZkBobPool.sol",
            "contractName": "ZkBobPool",
            "compilerVersion": "0.8.15+commit.e14f2714",
            "compilerSettings": "{\"evmVersion\":\"london\",\"libraries\":{\"lib/base58-solidity/contracts/Base58.sol:Base58\":\"0x22de6b06544ee5cd907813a04bcded149a2f49d2\",\"src/libraries/ZkAddress.sol:ZkAddress\":\"0x019d3788f00a7087234f3844cb1cece1f9982b7a\"},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@base58-solidity/=lib/base58-solidity/contracts/\",\":@gnosis/=lib/@gnosis/\",\":@gnosis/auction/=lib/@gnosis/auction/contracts/\",\":@openzeppelin/=lib/@openzeppelin/contracts/\",\":@openzeppelin/contracts/=lib/@openzeppelin/contracts/contracts/\",\":@uniswap/=lib/@uniswap/\",\":base58-solidity/=lib/base58-solidity/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]}",
            "sourceType": "SOLIDITY",
            "sourceFiles": {
                "lib/_openzeppelin/contracts/contracts/access/Ownable.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n",
                "lib/_openzeppelin/contracts/contracts/token/ERC20/IERC20.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n",
                "lib/_openzeppelin/contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n",
                "lib/_openzeppelin/contracts/contracts/token/ERC20/utils/SafeERC20.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n",
                "lib/_openzeppelin/contracts/contracts/utils/Address.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n",
                "lib/_openzeppelin/contracts/contracts/utils/Context.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n",
                "lib/_openzeppelin/contracts/contracts/utils/Strings.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n",
                "lib/_openzeppelin/contracts/contracts/utils/cryptography/ECDSA.sol": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n",
                "lib/_uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n",
                "lib/_uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n",
                "lib/_uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n",
                "lib/_uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.15;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\n/// @title Interface for WETH9\ninterface IWETH9 is IERC20 {\n    /// @notice Deposit ether to get wrapped ether\n    function deposit() external payable;\n\n    /// @notice Withdraw wrapped ether to get ether\n    function withdraw(uint256) external;\n}\n",
                "src/interfaces/IBatchDepositVerifier.sol": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface IBatchDepositVerifier {\n    function verifyProof(uint256[1] memory input, uint256[8] memory p) external view returns (bool);\n}\n",
                "src/interfaces/IERC20Permit.sol": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity 0.8.15;\n\ninterface IERC20Permit {\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n        external;\n\n    function nonces(address owner) external view returns (uint256);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external view returns (bytes32);\n\n    function SALTED_PERMIT_TYPEHASH() external view returns (bytes32);\n\n    function receiveWithPermit(\n        address _holder,\n        uint256 _value,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    )\n        external;\n\n    function receiveWithSaltedPermit(\n        address _holder,\n        uint256 _value,\n        uint256 _deadline,\n        bytes32 _salt,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    )\n        external;\n}\n",
                "src/interfaces/IMintableERC20.sol": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity 0.8.15;\n\ninterface IMintableERC20 {\n    function mint(address to, uint256 amount) external;\n}\n",
                "src/interfaces/IOperatorManager.sol": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface IOperatorManager {\n    function isOperator(address _addr) external view returns (bool);\n\n    function isOperatorFeeReceiver(address _operator, address _addr) external view returns (bool);\n\n    function operatorURI() external view returns (string memory);\n}\n",
                "src/interfaces/ITokenSeller.sol": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity 0.8.15;\n\ninterface ITokenSeller {\n    /**\n     * @dev Sells tokens for ETH.\n     * Prior to calling this function, contract balance of token0 should be greater than or equal to the sold amount.\n     * @param _receiver native ETH receiver.\n     * @param _amount amount of tokens to sell.\n     * @return (received eth amount, refunded token amount).\n     */\n    function sellForETH(address _receiver, uint256 _amount) external returns (uint256, uint256);\n\n    /**\n     * @dev Estimates amount of received ETH, when selling given amount of tokens via sellForETH function.\n     * @param _amount amount of tokens to sell.\n     * @return received eth amount.\n     */\n    function quoteSellForETH(uint256 _amount) external returns (uint256);\n}\n",
                "src/interfaces/ITransferVerifier.sol": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface ITransferVerifier {\n    function verifyProof(uint256[5] memory input, uint256[8] memory p) external view returns (bool);\n}\n",
                "src/interfaces/ITreeVerifier.sol": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ninterface ITreeVerifier {\n    function verifyProof(uint256[3] memory input, uint256[8] memory p) external view returns (bool);\n}\n",
                "src/interfaces/IZkBobDirectDepositQueue.sol": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.0;\n\ninterface IZkBobDirectDepositQueue {\n    function collect(\n        uint256[] calldata _indices,\n        uint256 _out_commit\n    )\n        external\n        returns (uint256 total, uint256 totalFee, uint256 hashsum, bytes memory message);\n}\n",
                "src/interfaces/IZkBobPool.sol": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.0;\n\ninterface IZkBobPool {\n    function pool_id() external view returns (uint256);\n\n    function recordDirectDeposit(address _sender, uint256 _amount) external;\n}\n",
                "src/proxy/EIP1967Admin.sol": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity 0.8.15;\n\n/**\n * @title EIP1967Admin\n * @dev Upgradeable proxy pattern implementation according to minimalistic EIP1967.\n */\ncontract EIP1967Admin {\n    // EIP 1967\n    // bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1)\n    uint256 internal constant EIP1967_ADMIN_STORAGE = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    modifier onlyAdmin() {\n        require(msg.sender == _admin(), \"EIP1967Admin: not an admin\");\n        _;\n    }\n\n    function _admin() internal view returns (address res) {\n        assembly {\n            res := sload(EIP1967_ADMIN_STORAGE)\n        }\n    }\n}\n",
                "src/utils/Ownable.sol": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\" as OZOwnable;\n\n/**\n * @title Ownable\n */\ncontract Ownable is OZOwnable.Ownable {\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view override {\n        require(_isOwner(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Tells if caller is the contract owner.\n     * @return true, if caller is the contract owner.\n     */\n    function _isOwner() internal view virtual returns (bool) {\n        return owner() == _msgSender();\n    }\n}\n",
                "src/zkbob/ZkBobPool.sol": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol\";\nimport \"../interfaces/ITransferVerifier.sol\";\nimport \"../interfaces/ITreeVerifier.sol\";\nimport \"../interfaces/IBatchDepositVerifier.sol\";\nimport \"../interfaces/IMintableERC20.sol\";\nimport \"../interfaces/IOperatorManager.sol\";\nimport \"../interfaces/IERC20Permit.sol\";\nimport \"../interfaces/ITokenSeller.sol\";\nimport \"../interfaces/IZkBobDirectDepositQueue.sol\";\nimport \"../interfaces/IZkBobPool.sol\";\nimport \"./utils/Parameters.sol\";\nimport \"./utils/ZkBobAccounting.sol\";\nimport \"../utils/Ownable.sol\";\nimport \"../proxy/EIP1967Admin.sol\";\n\n/**\n * @title ZkBobPool\n * Shielded transactions pool for BOB tokens.\n */\ncontract ZkBobPool is IZkBobPool, EIP1967Admin, Ownable, Parameters, ZkBobAccounting {\n    using SafeERC20 for IERC20;\n\n    uint256 internal constant MAX_POOL_ID = 0xffffff;\n    uint256 internal constant TOKEN_DENOMINATOR = 1_000_000_000;\n    bytes4 internal constant MESSAGE_PREFIX_COMMON_V1 = 0x00000000;\n//    bytes4 internal constant MESSAGE_PREFIX_DIRECT_DEPOSIT_V1 = 0x00000001;\n//    uint256 internal constant MAX_NUMBER_OF_DIRECT_DEPOSITS = 16;\n\n    uint256 public immutable pool_id;\n    ITransferVerifier public immutable transfer_verifier;\n    ITreeVerifier public immutable tree_verifier;\n    IBatchDepositVerifier public immutable batch_deposit_verifier;\n    address public immutable token;\n    IZkBobDirectDepositQueue public immutable direct_deposit_queue;\n\n    IOperatorManager public operatorManager;\n\n    mapping(uint256 => uint256) public nullifiers;\n    mapping(uint256 => uint256) public roots;\n    bytes32 public all_messages_hash;\n\n    mapping(address => uint256) public accumulatedFee;\n\n    ITokenSeller public tokenSeller;\n\n    event UpdateTokenSeller(address seller);\n    event UpdateOperatorManager(address manager);\n    event WithdrawFee(address indexed operator, uint256 fee);\n\n    event Message(uint256 indexed index, bytes32 indexed hash, bytes message);\n\n    constructor(\n        uint256 __pool_id,\n        address _token,\n        ITransferVerifier _transfer_verifier,\n        ITreeVerifier _tree_verifier,\n        IBatchDepositVerifier _batch_deposit_verifier,\n        address _direct_deposit_queue\n    ) {\n        require(__pool_id <= MAX_POOL_ID, \"ZkBobPool: exceeds max pool id\");\n        require(Address.isContract(_token), \"ZkBobPool: not a contract\");\n        require(Address.isContract(address(_transfer_verifier)), \"ZkBobPool: not a contract\");\n        require(Address.isContract(address(_tree_verifier)), \"ZkBobPool: not a contract\");\n        require(Address.isContract(_direct_deposit_queue), \"ZkBobPool: not a contract\");\n        pool_id = __pool_id;\n        token = _token;\n        transfer_verifier = _transfer_verifier;\n        tree_verifier = _tree_verifier;\n        batch_deposit_verifier = _batch_deposit_verifier;\n        direct_deposit_queue = IZkBobDirectDepositQueue(_direct_deposit_queue);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the current relayer operator.\n     */\n    modifier onlyOperator() {\n        require(operatorManager.isOperator(_msgSender()), \"ZkBobPool: not an operator\");\n        _;\n    }\n\n    /**\n     * @dev Initializes pool proxy storage.\n     * Callable only once and only through EIP1967Proxy constructor / upgradeToAndCall.\n     * @param _root initial empty merkle tree root.\n     * @param _tvlCap initial upper cap on the entire pool tvl, 18 decimals.\n     * @param _dailyDepositCap initial daily limit on the sum of all deposits, 18 decimals.\n     * @param _dailyWithdrawalCap initial daily limit on the sum of all withdrawals, 18 decimals.\n     * @param _dailyUserDepositCap initial daily limit on the sum of all per-address deposits, 18 decimals.\n     * @param _depositCap initial limit on the amount of a single deposit, 18 decimals.\n     * @param _dailyUserDirectDepositCap initial daily limit on the sum of all per-address direct deposits, 18 decimals.\n     * @param _directDepositCap initial limit on the amount of a single direct deposit, 18 decimals.\n     */\n    function initialize(\n        uint256 _root,\n        uint256 _tvlCap,\n        uint256 _dailyDepositCap,\n        uint256 _dailyWithdrawalCap,\n        uint256 _dailyUserDepositCap,\n        uint256 _depositCap,\n        uint256 _dailyUserDirectDepositCap,\n        uint256 _directDepositCap\n    )\n        external\n    {\n        require(msg.sender == address(this), \"ZkBobPool: not initializer\");\n        require(roots[0] == 0, \"ZkBobPool: already initialized\");\n        require(_root != 0, \"ZkBobPool: zero root\");\n        roots[0] = _root;\n        _setLimits(\n            0,\n            _tvlCap / TOKEN_DENOMINATOR,\n            _dailyDepositCap / TOKEN_DENOMINATOR,\n            _dailyWithdrawalCap / TOKEN_DENOMINATOR,\n            _dailyUserDepositCap / TOKEN_DENOMINATOR,\n            _depositCap / TOKEN_DENOMINATOR,\n            _dailyUserDirectDepositCap / TOKEN_DENOMINATOR,\n            _directDepositCap / TOKEN_DENOMINATOR\n        );\n    }\n\n    /**\n     * @dev Updates token seller contract used for native coin withdrawals.\n     * Callable only by the contract owner / proxy admin.\n     * @param _seller new token seller contract implementation. address(0) will deactivate native withdrawals.\n     */\n    function setTokenSeller(address _seller) external onlyOwner {\n        tokenSeller = ITokenSeller(_seller);\n        emit UpdateTokenSeller(_seller);\n    }\n\n    /**\n     * @dev Updates used operator manager contract.\n     * Callable only by the contract owner / proxy admin.\n     * @param _operatorManager new operator manager implementation.\n     */\n    function setOperatorManager(IOperatorManager _operatorManager) external onlyOwner {\n        require(address(_operatorManager) != address(0), \"ZkBobPool: manager is zero address\");\n        operatorManager = _operatorManager;\n        emit UpdateOperatorManager(address(_operatorManager));\n    }\n\n    /**\n     * @dev Tells the denominator for converting BOB into zkBOB units.\n     * 1e18 BOB units = 1e9 zkBOB units.\n     */\n    function denominator() external pure returns (uint256) {\n        return TOKEN_DENOMINATOR;\n    }\n\n    /**\n     * @dev Tells the current merkle tree index, which will be used for the next operation.\n     * Each operation increases merkle tree size by 128, so index is equal to the total number of seen operations, multiplied by 128.\n     * @return next operator merkle index.\n     */\n    function pool_index() external view returns (uint256) {\n        return _txCount() << 7;\n    }\n\n    function _root() internal view override returns (uint256) {\n        return roots[_transfer_index()];\n    }\n\n    function _pool_id() internal view override returns (uint256) {\n        return pool_id;\n    }\n\n    /**\n     * @dev Perform a zkBob pool transaction.\n     * Callable only by the current operator.\n     * Method uses a custom ABI encoding scheme described in CustomABIDecoder.\n     * Single transact() call performs either deposit, withdrawal or shielded transfer operation.\n     */\n    function transact() external onlyOperator {\n        address user;\n        uint256 txType = _tx_type();\n        if (txType == 0) {\n            user = _deposit_spender();\n        } else if (txType == 2) {\n            user = _memo_receiver();\n        } else if (txType == 3) {\n            user = _memo_permit_holder();\n        }\n        int256 transfer_token_delta = _transfer_token_amount();\n        (,, uint256 txCount) = _recordOperation(user, transfer_token_delta);\n\n        uint256 nullifier = _transfer_nullifier();\n        {\n            uint256 _pool_index = txCount << 7;\n\n            require(nullifiers[nullifier] == 0, \"ZkBobPool: doublespend detected\");\n            require(_transfer_index() <= _pool_index, \"ZkBobPool: transfer index out of bounds\");\n            require(transfer_verifier.verifyProof(_transfer_pub(), _transfer_proof()), \"ZkBobPool: bad transfer proof\");\n            require(\n                tree_verifier.verifyProof(_tree_pub(roots[_pool_index]), _tree_proof()), \"ZkBobPool: bad tree proof\"\n            );\n\n            nullifiers[nullifier] = uint256(keccak256(abi.encodePacked(_transfer_out_commit(), _transfer_delta())));\n            _pool_index += 128;\n            roots[_pool_index] = _tree_root_after();\n            bytes memory message = _memo_message();\n            // restrict memo message prefix (items count in little endian) to be < 2**16\n            require(bytes4(message) & 0x0000ffff == MESSAGE_PREFIX_COMMON_V1, \"ZkBobPool: bad message prefix\");\n            bytes32 message_hash = keccak256(message);\n            bytes32 _all_messages_hash = keccak256(abi.encodePacked(all_messages_hash, message_hash));\n            all_messages_hash = _all_messages_hash;\n            emit Message(_pool_index, _all_messages_hash, message);\n        }\n\n        uint256 fee = _memo_fee();\n        int256 token_amount = transfer_token_delta + int256(fee);\n        int256 energy_amount = _transfer_energy_amount();\n\n        if (txType == 0) {\n            // Deposit\n            require(transfer_token_delta > 0 && energy_amount == 0, \"ZkBobPool: incorrect deposit amounts\");\n            IERC20(token).safeTransferFrom(user, address(this), uint256(token_amount) * TOKEN_DENOMINATOR);\n        } else if (txType == 1) {\n            // Transfer\n            require(token_amount == 0 && energy_amount == 0, \"ZkBobPool: incorrect transfer amounts\");\n        } else if (txType == 2) {\n            // Withdraw\n            require(token_amount <= 0 && energy_amount <= 0, \"ZkBobPool: incorrect withdraw amounts\");\n\n            uint256 native_amount = _memo_native_amount() * TOKEN_DENOMINATOR;\n            uint256 withdraw_amount = uint256(-token_amount) * TOKEN_DENOMINATOR;\n\n            if (native_amount > 0) {\n                ITokenSeller seller = tokenSeller;\n                if (address(seller) != address(0)) {\n                    IERC20(token).safeTransfer(address(seller), native_amount);\n                    (, uint256 refunded) = seller.sellForETH(user, native_amount);\n                    withdraw_amount = withdraw_amount - native_amount + refunded;\n                }\n            }\n\n            if (withdraw_amount > 0) {\n                IERC20(token).safeTransfer(user, withdraw_amount);\n            }\n\n            // energy withdrawals are not yet implemented, any transaction with non-zero energy_amount will revert\n            // future version of the protocol will support energy withdrawals through negative energy_amount\n            if (energy_amount < 0) {\n                revert(\"ZkBobPool: XP claiming is not yet enabled\");\n            }\n        } else if (txType == 3) {\n            // Permittable token deposit\n            require(transfer_token_delta > 0 && energy_amount == 0, \"ZkBobPool: incorrect deposit amounts\");\n            (uint8 v, bytes32 r, bytes32 s) = _permittable_deposit_signature();\n            IERC20Permit(token).receiveWithSaltedPermit(\n                user, uint256(token_amount) * TOKEN_DENOMINATOR, _memo_permit_deadline(), bytes32(nullifier), v, r, s\n            );\n        } else {\n            revert(\"ZkBobPool: Incorrect transaction type\");\n        }\n\n        if (fee > 0) {\n            accumulatedFee[msg.sender] += fee;\n        }\n    }\n\n    function appendDirectDeposits(\n        uint256 _root_after,\n        uint256[] calldata _indices,\n        uint256 _out_commit,\n        uint256[8] memory _batch_deposit_proof,\n        uint256[8] memory _tree_proof\n    )\n        external\n        onlyOperator\n    {\n        (uint256 total, uint256 totalFee, uint256 hashsum, bytes memory message) =\n            direct_deposit_queue.collect(_indices, _out_commit);\n\n        uint256 txCount = _processDirectDepositBatch(total);\n        uint256 _pool_index = txCount << 7;\n\n        // verify that _out_commit corresponds to zero output account + 16 chosen notes + 111 empty notes\n        require(\n            batch_deposit_verifier.verifyProof([hashsum], _batch_deposit_proof), \"ZkBobPool: bad batch deposit proof\"\n        );\n\n        uint256[3] memory tree_pub = [roots[_pool_index], _root_after, _out_commit];\n        require(tree_verifier.verifyProof(tree_pub, _tree_proof), \"ZkBobPool: bad tree proof\");\n\n        _pool_index += 128;\n        roots[_pool_index] = _root_after;\n        bytes32 message_hash = keccak256(message);\n        bytes32 _all_messages_hash = keccak256(abi.encodePacked(all_messages_hash, message_hash));\n        all_messages_hash = _all_messages_hash;\n\n        if (totalFee > 0) {\n            accumulatedFee[msg.sender] += totalFee;\n        }\n\n        emit Message(_pool_index, _all_messages_hash, message);\n    }\n\n    function recordDirectDeposit(address _sender, uint256 _amount) external {\n        require(msg.sender == address(direct_deposit_queue),\"ZkBobPool: not authorized\");\n        _checkDirectDepositLimits(_sender, _amount);\n    }\n\n    /**\n     * @dev Withdraws accumulated fee on behalf of an operator.\n     * Callable only by the operator itself, or by a pre-configured operator fee receiver address.\n     * @param _operator address of an operator account to withdraw fee from.\n     * @param _to address of the accumulated fee tokens receiver.\n     */\n    function withdrawFee(address _operator, address _to) external {\n        require(\n            _operator == msg.sender || operatorManager.isOperatorFeeReceiver(_operator, msg.sender),\n            \"ZkBobPool: not authorized\"\n        );\n        uint256 fee = accumulatedFee[_operator] * TOKEN_DENOMINATOR;\n        require(fee > 0, \"ZkBobPool: no fee to withdraw\");\n        IERC20(token).safeTransfer(_to, fee);\n        accumulatedFee[_operator] = 0;\n        emit WithdrawFee(_operator, fee);\n    }\n\n    /**\n     * @dev Updates pool usage limits.\n     * Callable only by the contract owner / proxy admin.\n     * @param _tier pool limits tier (0-254).\n     * @param _tvlCap new upper cap on the entire pool tvl, 18 decimals.\n     * @param _dailyDepositCap new daily limit on the sum of all deposits, 18 decimals.\n     * @param _dailyWithdrawalCap new daily limit on the sum of all withdrawals, 18 decimals.\n     * @param _dailyUserDepositCap new daily limit on the sum of all per-address deposits, 18 decimals.\n     * @param _depositCap new limit on the amount of a single deposit, 18 decimals.\n     * @param _dailyUserDirectDepositCap new daily limit on the sum of all per-address direct deposits, 18 decimals.\n     * @param _directDepositCap new limit on the amount of a single direct deposit, 18 decimals.\n     */\n    function setLimits(\n        uint8 _tier,\n        uint256 _tvlCap,\n        uint256 _dailyDepositCap,\n        uint256 _dailyWithdrawalCap,\n        uint256 _dailyUserDepositCap,\n        uint256 _depositCap,\n        uint256 _dailyUserDirectDepositCap,\n        uint256 _directDepositCap\n    )\n        external\n        onlyOwner\n    {\n        _setLimits(\n            _tier,\n            _tvlCap / TOKEN_DENOMINATOR,\n            _dailyDepositCap / TOKEN_DENOMINATOR,\n            _dailyWithdrawalCap / TOKEN_DENOMINATOR,\n            _dailyUserDepositCap / TOKEN_DENOMINATOR,\n            _depositCap / TOKEN_DENOMINATOR,\n            _dailyUserDirectDepositCap / TOKEN_DENOMINATOR,\n            _directDepositCap / TOKEN_DENOMINATOR\n        );\n    }\n\n    /**\n     * @dev Resets daily limit usage for the current day.\n     * Callable only by the contract owner / proxy admin.\n     * @param _tier tier id to reset daily limits for.\n     */\n    function resetDailyLimits(uint8 _tier) external onlyOwner {\n        _resetDailyLimits(_tier);\n    }\n\n    /**\n     * @dev Updates users limit tiers.\n     * Callable only by the contract owner / proxy admin.\n     * @param _tier pool limits tier (0-255).\n     * 0 is the default tier.\n     * 1-254 are custom pool limit tiers, configured at runtime.\n     * 255 is the special tier with zero limits, used to effectively prevent some address from accessing the pool.\n     * @param _users list of user account addresses to assign a tier for.\n     */\n    function setUsersTier(uint8 _tier, address[] memory _users) external onlyOwner {\n        _setUsersTier(_tier, _users);\n    }\n\n    /**\n     * @dev Tells if caller is the contract owner.\n     * Gives ownership rights to the proxy admin as well.\n     * @return true, if caller is the contract owner or proxy admin.\n     */\n    function _isOwner() internal view override returns (bool) {\n        return super._isOwner() || _admin() == _msgSender();\n    }\n}\n",
                "src/zkbob/utils/CustomABIDecoder.sol": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\ncontract CustomABIDecoder {\n    uint256 constant transfer_nullifier_pos = 4;\n    uint256 constant transfer_nullifier_size = 32;\n    uint256 constant uint256_size = 32;\n\n    function _loaduint256(uint256 pos) internal pure returns (uint256 r) {\n        assembly {\n            r := calldataload(pos)\n        }\n    }\n\n    function _transfer_nullifier() internal pure returns (uint256 r) {\n        r = _loaduint256(transfer_nullifier_pos);\n    }\n\n    uint256 constant transfer_out_commit_pos = transfer_nullifier_pos + transfer_nullifier_size;\n    uint256 constant transfer_out_commit_size = 32;\n\n    function _transfer_out_commit() internal pure returns (uint256 r) {\n        r = _loaduint256(transfer_out_commit_pos);\n    }\n\n    uint256 constant transfer_index_pos = transfer_out_commit_pos + transfer_out_commit_size;\n    uint256 constant transfer_index_size = 6;\n\n    function _transfer_index() internal pure returns (uint48 r) {\n        r = uint48(_loaduint256(transfer_index_pos + transfer_index_size - uint256_size));\n    }\n\n    uint256 constant transfer_energy_amount_pos = transfer_index_pos + transfer_index_size;\n    uint256 constant transfer_energy_amount_size = 14;\n\n    function _transfer_energy_amount() internal pure returns (int112 r) {\n        r = int112(uint112(_loaduint256(transfer_energy_amount_pos + transfer_energy_amount_size - uint256_size)));\n    }\n\n    uint256 constant transfer_token_amount_pos = transfer_energy_amount_pos + transfer_energy_amount_size;\n    uint256 constant transfer_token_amount_size = 8;\n\n    function _transfer_token_amount() internal pure returns (int64 r) {\n        r = int64(uint64(_loaduint256(transfer_token_amount_pos + transfer_token_amount_size - uint256_size)));\n    }\n\n    uint256 constant transfer_proof_pos = transfer_token_amount_pos + transfer_token_amount_size;\n    uint256 constant transfer_proof_size = 256;\n\n    function _transfer_proof() internal pure returns (uint256[8] calldata r) {\n        uint256 pos = transfer_proof_pos;\n        assembly {\n            r := pos\n        }\n    }\n\n    uint256 constant tree_root_after_pos = transfer_proof_pos + transfer_proof_size;\n    uint256 constant tree_root_after_size = 32;\n\n    function _tree_root_after() internal pure returns (uint256 r) {\n        r = _loaduint256(tree_root_after_pos);\n    }\n\n    uint256 constant tree_proof_pos = tree_root_after_pos + tree_root_after_size;\n    uint256 constant tree_proof_size = 256;\n\n    function _tree_proof() internal pure returns (uint256[8] calldata r) {\n        uint256 pos = tree_proof_pos;\n        assembly {\n            r := pos\n        }\n    }\n\n    uint256 constant tx_type_pos = tree_proof_pos + tree_proof_size;\n    uint256 constant tx_type_size = 2;\n    uint256 constant tx_type_mask = (1 << (tx_type_size * 8)) - 1;\n\n    function _tx_type() internal pure returns (uint256 r) {\n        r = _loaduint256(tx_type_pos + tx_type_size - uint256_size) & tx_type_mask;\n    }\n\n    uint256 constant memo_data_size_pos = tx_type_pos + tx_type_size;\n    uint256 constant memo_data_size_size = 2;\n    uint256 constant memo_data_size_mask = (1 << (memo_data_size_size * 8)) - 1;\n\n    uint256 constant memo_data_pos = memo_data_size_pos + memo_data_size_size;\n\n    function _memo_data_size() internal pure returns (uint256 r) {\n        r = _loaduint256(memo_data_size_pos + memo_data_size_size - uint256_size) & memo_data_size_mask;\n    }\n\n    function _memo_data() internal pure returns (bytes calldata r) {\n        uint256 offset = memo_data_pos;\n        uint256 length = _memo_data_size();\n        assembly {\n            r.offset := offset\n            r.length := length\n        }\n    }\n\n    function _sign_r_vs_pos() internal pure returns (uint256) {\n        return memo_data_pos + _memo_data_size();\n    }\n\n    uint256 constant sign_r_vs_size = 64;\n\n    function _sign_r_vs() internal pure returns (bytes32 r, bytes32 vs) {\n        uint256 offset = _sign_r_vs_pos();\n        assembly {\n            r := calldataload(offset)\n            vs := calldataload(add(offset, 32))\n        }\n    }\n\n    uint256 constant transfer_delta_size =\n        transfer_index_size + transfer_energy_amount_size + transfer_token_amount_size;\n    uint256 constant transfer_delta_mask = (1 << (transfer_delta_size * 8)) - 1;\n\n    function _transfer_delta() internal pure returns (uint256 r) {\n        r = _loaduint256(transfer_index_pos + transfer_delta_size - uint256_size) & transfer_delta_mask;\n    }\n\n    function _memo_fixed_size() internal pure returns (uint256 r) {\n        uint256 t = _tx_type();\n        if (t == 0 || t == 1) {\n            // fee\n            // 8\n            r = 8;\n        } else if (t == 2) {\n            // fee + native amount + recipient\n            // 8 + 8 + 20\n            r = 36;\n        } else if (t == 3) {\n            // fee + deadline + address\n            // 8 + 8 + 20\n            r = 36;\n        } else {\n            revert();\n        }\n    }\n\n    function _memo_message() internal pure returns (bytes calldata r) {\n        uint256 memo_fixed_size = _memo_fixed_size();\n        uint256 offset = memo_data_pos + memo_fixed_size;\n        uint256 length = _memo_data_size() - memo_fixed_size;\n        assembly {\n            r.offset := offset\n            r.length := length\n        }\n    }\n\n    uint256 constant memo_fee_pos = memo_data_pos;\n    uint256 constant memo_fee_size = 8;\n    uint256 constant memo_fee_mask = (1 << (memo_fee_size * 8)) - 1;\n\n    function _memo_fee() internal pure returns (uint256 r) {\n        r = _loaduint256(memo_fee_pos + memo_fee_size - uint256_size) & memo_fee_mask;\n    }\n\n    // Withdraw specific data\n\n    uint256 constant memo_native_amount_pos = memo_fee_pos + memo_fee_size;\n    uint256 constant memo_native_amount_size = 8;\n    uint256 constant memo_native_amount_mask = (1 << (memo_native_amount_size * 8)) - 1;\n\n    function _memo_native_amount() internal pure returns (uint256 r) {\n        r = _loaduint256(memo_native_amount_pos + memo_native_amount_size - uint256_size) & memo_native_amount_mask;\n    }\n\n    uint256 constant memo_receiver_pos = memo_native_amount_pos + memo_native_amount_size;\n    uint256 constant memo_receiver_size = 20;\n\n    function _memo_receiver() internal pure returns (address r) {\n        r = address(uint160(_loaduint256(memo_receiver_pos + memo_receiver_size - uint256_size)));\n    }\n\n    // Permittable token deposit specific data\n\n    uint256 constant memo_permit_deadline_pos = memo_fee_pos + memo_fee_size;\n    uint256 constant memo_permit_deadline_size = 8;\n\n    function _memo_permit_deadline() internal pure returns (uint64 r) {\n        r = uint64(_loaduint256(memo_permit_deadline_pos + memo_permit_deadline_size - uint256_size));\n    }\n\n    uint256 constant memo_permit_holder_pos = memo_permit_deadline_pos + memo_permit_deadline_size;\n    uint256 constant memo_permit_holder_size = 20;\n\n    function _memo_permit_holder() internal pure returns (address r) {\n        r = address(uint160(_loaduint256(memo_permit_holder_pos + memo_permit_holder_size - uint256_size)));\n    }\n}\n",
                "src/zkbob/utils/Parameters.sol": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./CustomABIDecoder.sol\";\n\nabstract contract Parameters is CustomABIDecoder {\n    uint256 constant R = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    bytes32 constant S_MASK = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    function _root() internal view virtual returns (uint256);\n    function _pool_id() internal view virtual returns (uint256);\n\n    function _transfer_pub() internal view returns (uint256[5] memory r) {\n        r[0] = _root();\n        r[1] = _transfer_nullifier();\n        r[2] = _transfer_out_commit();\n        r[3] = _transfer_delta() + (_pool_id() << (transfer_delta_size * 8));\n        r[4] = uint256(keccak256(_memo_data())) % R;\n    }\n\n    function _tree_pub(uint256 _root_before) internal view returns (uint256[3] memory r) {\n        r[0] = _root_before;\n        r[1] = _tree_root_after();\n        r[2] = _transfer_out_commit();\n    }\n\n    // NOTE only valid in the context of normal deposit (tx_type=0)\n    function _deposit_spender() internal pure returns (address) {\n        (bytes32 r, bytes32 vs) = _sign_r_vs();\n        return ECDSA.recover(ECDSA.toEthSignedMessageHash(bytes32(_transfer_nullifier())), r, vs);\n    }\n\n    // NOTE only valid in the context of permittable token deposit (tx_type=3)\n    function _permittable_deposit_signature() internal pure returns (uint8, bytes32, bytes32) {\n        (bytes32 r, bytes32 vs) = _sign_r_vs();\n        return (uint8((uint256(vs) >> 255) + 27), r, vs & S_MASK);\n    }\n}\n",
                "src/zkbob/utils/ZkBobAccounting.sol": "// SPDX-License-Identifier: CC0-1.0\n\npragma solidity 0.8.15;\n\n/**\n * @title ZkBobAccounting\n * @dev On chain accounting for zkBob operations, limits and stats.\n * Units: 1 BOB = 1e18 wei = 1e9 zkBOB units\n * Limitations: Contract will only work correctly as long as pool tvl does not exceed 4.7e12 BOB (4.7 trillion)\n * and overall transaction count does not exceed 4.3e9 (4.3 billion). Pool usage limits cannot exceed 4.3e9 BOB (4.3 billion) per day.\n */\ncontract ZkBobAccounting {\n    uint256 internal constant PRECISION = 1_000_000_000;\n    uint256 internal constant SLOT_DURATION = 1 hours;\n    uint256 internal constant DAY_SLOTS = 1 days / SLOT_DURATION;\n    uint256 internal constant WEEK_SLOTS = 1 weeks / SLOT_DURATION;\n\n    struct Slot0 {\n        // max seen average tvl over period of at least 1 week (granularity of 1e9), might not be precise\n        // max possible tvl - type(uint56).max * 1e9 zkBOB units ~= 7.2e16 BOB\n        uint56 maxWeeklyAvgTvl;\n        // max number of pool interactions over 1 week, might not be precise\n        // max possible tx count - type(uint32).max ~= 4.3e9 transactions\n        uint32 maxWeeklyTxCount;\n        // 1 week behind snapshot time slot (granularity of 1 hour)\n        // max possible timestamp - Dec 08 3883\n        uint24 tailSlot;\n        // active snapshot time slot (granularity of 1 hour)\n        // max possible timestamp - Dec 08 3883\n        uint24 headSlot;\n        // cumulative sum of tvl over txCount interactions (granularity of 1e9)\n        // max possible cumulative tvl ~= type(uint32).max * type(uint56).max = 4.3e9 transactions * 7.2e16 BOB\n        uint88 cumTvl;\n        // number of successful pool interactions since launch\n        // max possible tx count - type(uint32).max ~= 4.3e9 transactions\n        uint32 txCount;\n    }\n\n    struct Slot1 {\n        // current pool tvl (granularity of 1)\n        // max possible tvl - type(uint72).max * 1 zkBOB units ~= 4.7e21 zkBOB units ~= 4.7e12 BOB\n        uint72 tvl;\n    }\n\n    struct Tier {\n        TierLimits limits;\n        TierStats stats;\n    }\n\n    struct TierLimits {\n        // max cap on the entire pool tvl (granularity of 1e9)\n        // max possible cap - type(uint56).max * 1e9 zkBOB units ~= 7.2e16 BOB\n        uint56 tvlCap;\n        // max cap on the daily deposits sum (granularity of 1e9)\n        // max possible cap - type(uint32).max * 1e9 zkBOB units ~= 4.3e9 BOB\n        uint32 dailyDepositCap;\n        // max cap on the daily withdrawal sum (granularity of 1e9)\n        // max possible cap - type(uint32).max * 1e9 zkBOB units ~= 4.3e9 BOB\n        uint32 dailyWithdrawalCap;\n        // max cap on the daily deposits sum for single user (granularity of 1e9)\n        // max possible cap - type(uint32).max * 1e9 zkBOB units ~= 4.3e9 BOB\n        uint32 dailyUserDepositCap;\n        // max cap on a single deposit (granularity of 1e9)\n        // max possible cap - type(uint32).max * 1e9 zkBOB units ~= 4.3e9 BOB\n        uint32 depositCap;\n        // max cap on a single direct deposit (granularity of 1e9)\n        // max possible cap - type(uint32).max * 1e9 zkBOB units ~= 4.3e9 BOB\n        uint32 directDepositCap;\n        // max cap on the daily direct deposits sum for single user (granularity of 1e9)\n        // max possible cap - type(uint32).max * 1e9 zkBOB units ~= 4.3e9 BOB\n        uint32 dailyUserDirectDepositCap;\n    }\n\n    struct TierStats {\n        uint16 day; // last update day number\n        uint72 dailyDeposit; // sum of all deposits during given day\n        uint72 dailyWithdrawal; // sum of all withdrawals during given day\n    }\n\n    struct Snapshot {\n        uint24 nextSlot; // next slot to from the queue\n        uint32 txCount; // number of successful pool interactions since launch at the time of the snapshot\n        uint88 cumTvl; // cumulative sum of tvl over txCount interactions (granularity of 1e9)\n    }\n\n    struct UserStats {\n        uint16 day; // last update day number\n        uint72 dailyDeposit; // sum of user deposits during given day\n        uint8 tier; // user limits tier, 0 being the default tier\n        uint72 dailyDirectDeposit; // sum of user direct deposits during given day\n    }\n\n    struct Limits {\n        uint256 tvlCap;\n        uint256 tvl;\n        uint256 dailyDepositCap;\n        uint256 dailyDepositCapUsage;\n        uint256 dailyWithdrawalCap;\n        uint256 dailyWithdrawalCapUsage;\n        uint256 dailyUserDepositCap;\n        uint256 dailyUserDepositCapUsage;\n        uint256 depositCap;\n        uint8 tier;\n        uint256 dailyUserDirectDepositCap;\n        uint256 dailyUserDirectDepositCapUsage;\n        uint256 directDepositCap;\n    }\n\n    Slot0 private slot0;\n    Slot1 private slot1;\n    mapping(uint256 => Tier) private tiers; // pool limits and usage per tier\n    mapping(uint256 => Snapshot) private snapshots; // single linked list of hourly snapshots\n    mapping(address => UserStats) private userStats;\n\n    event UpdateLimits(uint8 indexed tier, TierLimits limits);\n    event UpdateTier(address user, uint8 tier);\n\n    /**\n     * @dev Returns currently configured limits and remaining quotas for the given user as of the current block.\n     * @param _user user for which to retrieve limits.\n     * @return limits (denominated in zkBOB units = 1e-9 BOB)\n     */\n    function getLimitsFor(address _user) external view returns (Limits memory) {\n        Slot1 memory s1 = slot1;\n        UserStats memory us = userStats[_user];\n        Tier storage t = tiers[uint256(us.tier)];\n        TierLimits memory tl = t.limits;\n        TierStats memory ts = t.stats;\n        uint24 curSlot = uint24(block.timestamp / SLOT_DURATION);\n        uint24 today = curSlot / uint24(DAY_SLOTS);\n        return Limits({\n            tvlCap: tl.tvlCap * PRECISION,\n            tvl: s1.tvl,\n            dailyDepositCap: tl.dailyDepositCap * PRECISION,\n            dailyDepositCapUsage: (ts.day == today) ? ts.dailyDeposit : 0,\n            dailyWithdrawalCap: tl.dailyWithdrawalCap * PRECISION,\n            dailyWithdrawalCapUsage: (ts.day == today) ? ts.dailyWithdrawal : 0,\n            dailyUserDepositCap: tl.dailyUserDepositCap * PRECISION,\n            dailyUserDepositCapUsage: (us.day == today) ? us.dailyDeposit : 0,\n            depositCap: tl.depositCap * PRECISION,\n            tier: us.tier,\n            dailyUserDirectDepositCap: tl.dailyUserDirectDepositCap * PRECISION,\n            dailyUserDirectDepositCapUsage: (us.day == today) ? us.dailyDirectDeposit : 0,\n            directDepositCap: tl.directDepositCap * PRECISION\n        });\n    }\n\n    function _recordOperation(\n        address _user,\n        int256 _txAmount\n    )\n        internal\n        returns (uint56 maxWeeklyAvgTvl, uint32 maxWeeklyTxCount, uint256 txCount)\n    {\n        Slot0 memory s0 = slot0;\n        Slot1 memory s1 = slot1;\n        uint24 curSlot = uint24(block.timestamp / SLOT_DURATION);\n        txCount = uint256(s0.txCount);\n\n        // for full correctness, next line should use \"while\" instead of \"if\"\n        // however, in order to keep constant gas usage, \"if\" is being used\n        // this can lead to a longer sliding window (> 1 week) in some cases,\n        // but eventually it will converge back to the 1 week target\n        if (s0.txCount > 0 && curSlot - s0.tailSlot > WEEK_SLOTS) {\n            // if tail is more than 1 week behind, we move tail pointer to the next snapshot\n            Snapshot memory sn = snapshots[s0.tailSlot];\n            delete snapshots[s0.tailSlot];\n            s0.tailSlot = sn.nextSlot;\n            uint32 weeklyTxCount = s0.txCount - sn.txCount;\n            if (weeklyTxCount > s0.maxWeeklyTxCount) {\n                s0.maxWeeklyTxCount = weeklyTxCount;\n            }\n            uint56 avgTvl = uint56((s0.cumTvl - sn.cumTvl) / weeklyTxCount);\n            if (avgTvl > s0.maxWeeklyAvgTvl) {\n                s0.maxWeeklyAvgTvl = avgTvl;\n            }\n        }\n\n        if (s0.headSlot < curSlot) {\n            snapshots[s0.headSlot] = Snapshot(curSlot, s0.txCount, s0.cumTvl);\n            s0.headSlot = curSlot;\n        }\n\n        // update head stats\n        s0.cumTvl += s1.tvl / uint72(PRECISION);\n        s0.txCount++;\n\n        _processTVLChange(s1, _user, _txAmount);\n\n        slot0 = s0;\n        return (s0.maxWeeklyAvgTvl, s0.maxWeeklyTxCount, txCount);\n    }\n\n    function _processTVLChange(Slot1 memory s1, address _user, int256 _txAmount) internal {\n        uint16 curDay = uint16(block.timestamp / SLOT_DURATION / DAY_SLOTS);\n\n        if (_txAmount == 0) {\n            return;\n        }\n\n        UserStats memory us = userStats[_user];\n        Tier storage t = tiers[us.tier];\n        TierLimits memory tl = t.limits;\n        TierStats memory ts = t.stats;\n\n        if (_txAmount > 0) {\n            uint256 depositAmount = uint256(_txAmount);\n            s1.tvl += uint72(depositAmount);\n\n            // check all sorts of limits when processing a deposit\n            require(depositAmount <= uint256(tl.depositCap) * PRECISION, \"ZkBobAccounting: single deposit cap exceeded\");\n            require(uint256(s1.tvl) <= uint256(tl.tvlCap) * PRECISION, \"ZkBobAccounting: tvl cap exceeded\");\n\n            if (curDay > us.day) {\n                // user snapshot is outdated, day number and daily sum could be reset\n                userStats[_user] =\n                    UserStats({day: curDay, dailyDeposit: uint72(depositAmount), tier: us.tier, dailyDirectDeposit: 0});\n            } else {\n                us.dailyDeposit += uint72(depositAmount);\n                require(\n                    uint256(us.dailyDeposit) <= uint256(tl.dailyUserDepositCap) * PRECISION,\n                    \"ZkBobAccounting: daily user deposit cap exceeded\"\n                );\n                userStats[_user] = us;\n            }\n\n            if (curDay > ts.day) {\n                // latest deposit was on an earlier day, reset daily withdrawal sum\n                ts = TierStats({day: curDay, dailyDeposit: uint72(depositAmount), dailyWithdrawal: 0});\n            } else {\n                ts.dailyDeposit += uint72(depositAmount);\n                require(\n                    uint256(ts.dailyDeposit) <= uint256(tl.dailyDepositCap) * PRECISION,\n                    \"ZkBobAccounting: daily deposit cap exceeded\"\n                );\n            }\n        } else {\n            uint256 withdrawAmount = uint256(-_txAmount);\n            require(withdrawAmount <= type(uint32).max * PRECISION, \"ZkBobAccounting: withdrawal amount too large\");\n            s1.tvl -= uint72(withdrawAmount);\n\n            if (curDay > ts.day) {\n                // latest withdrawal was on an earlier day, reset daily deposit sum\n                ts = TierStats({day: curDay, dailyDeposit: 0, dailyWithdrawal: uint72(withdrawAmount)});\n            } else {\n                ts.dailyWithdrawal += uint72(withdrawAmount);\n                require(\n                    uint256(ts.dailyWithdrawal) <= uint256(tl.dailyWithdrawalCap) * PRECISION,\n                    \"ZkBobAccounting: daily withdrawal cap exceeded\"\n                );\n            }\n        }\n\n        slot1 = s1;\n        t.stats = ts;\n    }\n\n    function _checkDirectDepositLimits(address _user, uint256 _amount) internal {\n        uint16 curDay = uint16(block.timestamp / SLOT_DURATION / DAY_SLOTS);\n\n        UserStats memory us = userStats[_user];\n        TierLimits memory tl = tiers[us.tier].limits;\n\n        // check all sorts of limits when processing a deposit\n        require(\n            _amount <= uint256(tl.directDepositCap) * PRECISION, \"ZkBobAccounting: single direct deposit cap exceeded\"\n        );\n\n        if (curDay > us.day) {\n            // user snapshot is outdated, day number and daily sum could be reset\n            us = UserStats({day: curDay, dailyDeposit: 0, tier: us.tier, dailyDirectDeposit: uint72(_amount)});\n        } else {\n            us.dailyDirectDeposit += uint72(_amount);\n            require(\n                uint256(us.dailyDirectDeposit) <= uint256(tl.dailyUserDirectDepositCap) * PRECISION,\n                \"ZkBobAccounting: daily user direct deposit cap exceeded\"\n            );\n        }\n        userStats[_user] = us;\n    }\n\n    function _processDirectDepositBatch(uint256 _totalAmount) internal returns (uint256) {\n        slot1.tvl += uint72(_totalAmount);\n        return slot0.txCount++;\n    }\n\n    function _resetDailyLimits(uint8 _tier) internal {\n        delete tiers[_tier].stats;\n    }\n\n    function _setLimits(\n        uint8 _tier,\n        uint256 _tvlCap,\n        uint256 _dailyDepositCap,\n        uint256 _dailyWithdrawalCap,\n        uint256 _dailyUserDepositCap,\n        uint256 _depositCap,\n        uint256 _dailyUserDirectDepositCap,\n        uint256 _directDepositCap\n    )\n        internal\n    {\n        require(_tier < 255, \"ZkBobAccounting: invalid limit tier\");\n        require(_depositCap > 0, \"ZkBobAccounting: zero deposit cap\");\n        require(_tvlCap <= type(uint56).max * PRECISION, \"ZkBobAccounting: tvl cap too large\");\n        require(_dailyDepositCap <= type(uint32).max * PRECISION, \"ZkBobAccounting: daily deposit cap too large\");\n        require(_dailyWithdrawalCap <= type(uint32).max * PRECISION, \"ZkBobAccounting: daily withdrawal cap too large\");\n        require(_dailyUserDepositCap >= _depositCap, \"ZkBobAccounting: daily user deposit cap too low\");\n        require(_dailyDepositCap >= _dailyUserDepositCap, \"ZkBobAccounting: daily deposit cap too low\");\n        require(_tvlCap >= _dailyDepositCap, \"ZkBobAccounting: tvl cap too low\");\n        require(_dailyWithdrawalCap > 0, \"ZkBobAccounting: zero daily withdrawal cap\");\n        require(\n            _dailyUserDirectDepositCap >= _directDepositCap, \"ZkBobAccounting: daily user direct deposit cap too low\"\n        );\n        TierLimits memory tl = TierLimits({\n            tvlCap: uint56(_tvlCap / PRECISION),\n            dailyDepositCap: uint32(_dailyDepositCap / PRECISION),\n            dailyWithdrawalCap: uint32(_dailyWithdrawalCap / PRECISION),\n            dailyUserDepositCap: uint32(_dailyUserDepositCap / PRECISION),\n            depositCap: uint32(_depositCap / PRECISION),\n            dailyUserDirectDepositCap: uint32(_dailyUserDirectDepositCap / PRECISION),\n            directDepositCap: uint32(_directDepositCap / PRECISION)\n        });\n        tiers[_tier].limits = tl;\n        emit UpdateLimits(_tier, tl);\n    }\n\n    function _setUsersTier(uint8 _tier, address[] memory _users) internal {\n        require(\n            _tier == 255 || tiers[uint256(_tier)].limits.tvlCap > 0, \"ZkBobAccounting: non-existing pool limits tier\"\n        );\n        for (uint256 i = 0; i < _users.length; i++) {\n            address user = _users[i];\n            userStats[user].tier = _tier;\n            emit UpdateTier(user, _tier);\n        }\n    }\n\n    function _txCount() internal view returns (uint256) {\n        return slot0.txCount;\n    }\n}\n"
            },
            "abi": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__pool_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract ITransferVerifier\",\"name\":\"_transfer_verifier\",\"type\":\"address\"},{\"internalType\":\"contract ITreeVerifier\",\"name\":\"_tree_verifier\",\"type\":\"address\"},{\"internalType\":\"contract IBatchDepositVerifier\",\"name\":\"_batch_deposit_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_direct_deposit_queue\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"Message\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint56\",\"name\":\"tvlCap\",\"type\":\"uint56\"},{\"internalType\":\"uint32\",\"name\":\"dailyDepositCap\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dailyWithdrawalCap\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dailyUserDepositCap\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"depositCap\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"directDepositCap\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"dailyUserDirectDepositCap\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct ZkBobAccounting.TierLimits\",\"name\":\"limits\",\"type\":\"tuple\"}],\"name\":\"UpdateLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"UpdateOperatorManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"UpdateTier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"UpdateTokenSeller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"WithdrawFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accumulatedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"all_messages_hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_root_after\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_out_commit\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"_batch_deposit_proof\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[8]\",\"name\":\"_tree_proof\",\"type\":\"uint256[8]\"}],\"name\":\"appendDirectDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batch_deposit_verifier\",\"outputs\":[{\"internalType\":\"contract IBatchDepositVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"direct_deposit_queue\",\"outputs\":[{\"internalType\":\"contract IZkBobDirectDepositQueue\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLimitsFor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tvlCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyDepositCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyDepositCapUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyWithdrawalCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyWithdrawalCapUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyUserDepositCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyUserDepositCapUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositCap\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dailyUserDirectDepositCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyUserDirectDepositCapUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directDepositCap\",\"type\":\"uint256\"}],\"internalType\":\"struct ZkBobAccounting.Limits\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tvlCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyDepositCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyWithdrawalCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyUserDepositCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyUserDirectDepositCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_directDepositCap\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nullifiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorManager\",\"outputs\":[{\"internalType\":\"contract IOperatorManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recordDirectDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tier\",\"type\":\"uint8\"}],\"name\":\"resetDailyLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tvlCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyDepositCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyWithdrawalCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyUserDepositCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyUserDirectDepositCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_directDepositCap\",\"type\":\"uint256\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOperatorManager\",\"name\":\"_operatorManager\",\"type\":\"address\"}],\"name\":\"setOperatorManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"setTokenSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tier\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"setUsersTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSeller\",\"outputs\":[{\"internalType\":\"contract ITokenSeller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfer_verifier\",\"outputs\":[{\"internalType\":\"contract ITransferVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tree_verifier\",\"outputs\":[{\"internalType\":\"contract ITreeVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
            "constructorArguments": null,
            "matchType": "PARTIAL",
            "compilationArtifacts": null,
            "creationInputArtifacts": null,
            "deployedBytecodeArtifacts": null
        }
    ]
}